#!/bin/sh
#
### BEGIN INIT INFO
# Provides:          micro-evtd
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Should-Start:      
# Should-Stop:       
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Daemon for Linkstation/Kuro micro controller
# Description:       Micro-evtd is able to control and monitor fans,
#                    various LEDs, system temperature and two buttons. It
#                    can also set the system in standby and wake up on
#                    timed events.
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

DAEMON=/usr/sbin/micro-evtd
NAME=micro-evtd
DESC="Daemon for Linkstation/Kuro micro controller"
LOGDIR=/var/log/micro-evtd

PIDFILE=/var/run/micro-evtd.pid

test -x $DAEMON || exit 0

. /lib/lsb/init-functions

DAEMON_OPTS=""
DIETIME=10
LOGFILE=$LOGDIR/$NAME.log  # Server logfile
STARTTIME=1

MICROAPL=/usr/sbin/microapl

# Include defaults if available
if [ -f /etc/default/$NAME ] ; then
	. /etc/default/$NAME
fi


set -e

running_pid() {
	# Check if a given process pid's cmdline matches a given name
	pid=$1
	name=$2
	[ -z "$pid" ] && return 1 
	[ ! -d /proc/$pid ] &&  return 1
	cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
	# Is this the expected server
	[ "$cmd" != "$name" ] &&  return 1
	return 0
}

running() {
	# Check if the process is running looking at /proc
	# (works for all users)

	# No pidfile, probably no daemon present
	[ ! -f "$PIDFILE" ] && return 1
	pid=`cat $PIDFILE`
	running_pid $pid $DAEMON || return 1
	return 0
}

check_supported_device() {
	# Check if current platform is supported.
	device=$(sed -n '/Hardware/ {s/^.*: //;p}' /proc/cpuinfo)
	case $device in
		*"(Flattened Device Tree)")
		device=$(cat /proc/device-tree/model)
		;;
	esac

	case $device in
		# Supported hardware, start the process using the wrapper
		"Buffalo Linkstation Pro/Live" | "Buffalo/Revogear Kurobox Pro")
		return 0
		;;
		# Hardware not supported, tell and die
		*)
		log_failure_msg "micro-evtd error: device is not supported"
		exit 1
		;;
	esac
}

start_server() {
	# Start the process using the wrapper
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
		--exec $DAEMON -- $DAEMON_OPTS
	errcode=$?

	# Stop flashing LEDs and clear error codes
	[ -x $DAEMON ] && $DAEMON -q -s 02520000,02540000

	return $errcode
}

stop_server() {
	# Stop the process using the wrapper
	start-stop-daemon --stop --quiet --pidfile $PIDFILE \
		--exec $DAEMON
	errcode=$?

	# flash the led to indicate shutting down
	[ -x $DAEMON ] && $DAEMON -q -s 02520100

	# disable the watchdog so that the timer doesn't kill the box
	# (e.g. while in single user mode)
	[ -x $MICROAPL ] && $MICROAPL -a system_set_watchdog off

	return $errcode
}

reload_server() {
	[ ! -f "$PIDFILE" ] && return 1
	pid=`cat $PIDFILE` # This is the daemon's pid
	# Send a SIGHUP
	kill -1 $pid
	return $?
}

force_stop() {
	# Force the process to die killing it manually
	[ ! -e "$PIDFILE" ] && return
	if running ; then
		kill -15 $pid
		# Is it really dead?
		sleep "$DIETIME"s
		if running ; then
			kill -9 $pid
			sleep "$DIETIME"s
			if running ; then
				echo "Cannot kill $NAME (pid=$pid)!"
				exit 1
			fi
		fi
	fi
	rm -f $PIDFILE
}


case "$1" in
	start)
		check_supported_device
		log_daemon_msg "Starting $DESC" "$NAME"
		# Check if it's running first
		if running ;  then
			log_progress_msg "apparently already running"
			log_end_msg 0
			exit 0
		fi
		if start_server ; then
			[ -n "$STARTTIME" ] && sleep $STARTTIME # Wait some time 
			if  running ;  then
				# It's ok, the server started and is running
				log_end_msg 0
			else
				# It is not running after we did start
				log_end_msg 1
			fi
		else
			# Either we could not start it
			log_end_msg 1
		fi
		;;
	stop)
		log_daemon_msg "Stopping $DESC" "$NAME"
		if running ; then
			# Only stop the server if we see it running
			stop_server
			log_end_msg $?
		else
			# If it's not running don't do anything
			log_progress_msg "apparently not running"
			log_end_msg 0
			exit 0
		fi
		;;
	force-stop)
		# First try to stop gracefully the program
		$0 stop
		if running; then
			# If it's still running try to kill it more forcefully
			log_daemon_msg "Stopping (force) $DESC" "$NAME"
			force_stop
			log_end_msg $?
		fi
		;;
	restart|force-reload)
		check_supported_device
		log_daemon_msg "Restarting $DESC" "$NAME"
		stop_server
		# Wait some sensible amount, some server need this
		[ -n "$DIETIME" ] && sleep $DIETIME
		start_server
		[ -n "$STARTTIME" ] && sleep $STARTTIME
		running
		log_end_msg $?
		;;
	status)

		log_daemon_msg "Checking status of $DESC" "$NAME"
		if running ;  then
			log_progress_msg "running"
			log_end_msg 0
		else
			log_progress_msg "apparently not running"
			log_end_msg 1
			exit 1
		fi
		;;
	reload)
		log_warning_msg "Reloading $NAME daemon: not implemented, as the daemon"
		log_warning_msg "cannot re-read the config file (use restart)."
		;;
	*)
		N=/etc/init.d/$NAME
		echo "Usage: $N {start|stop|force-stop|restart|force-reload|status}" >&2
		exit 1
		;;
esac

exit 0
